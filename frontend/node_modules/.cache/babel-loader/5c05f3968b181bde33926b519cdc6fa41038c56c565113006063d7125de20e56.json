{"ast":null,"code":"var _jsxFileName = \"/Users/jihoon/Desktop/study/tdd-jest/test-shop/frontend/src/contexts/OrderContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useMemo, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OrderContext = /*#__PURE__*/createContext();\nconst pricePerItem = {\n  products: 1000,\n  options: 500\n};\nfunction calculateSubtotal(orderType, orderCounts) {\n  let optionCount = 0;\n  for (const count of orderCounts[orderType].values()) {\n    optionCount += count;\n  }\n  return optionCount * pricePerItem[orderType];\n}\nexport function OrderContextProvider(props) {\n  _s();\n  const [orderCounts, setOrderCounts] = useState({\n    products: new Map(),\n    options: new Map()\n  });\n  const [totals, setTotals] = useState({\n    products: 0,\n    options: 0,\n    total: 0\n  });\n  useEffect(() => {\n    const productsTotal = calculateSubtotal('products', orderCounts);\n    const optionsTotal = calculateSubtotal('options', orderCounts);\n    const total = productsTotal + optionsTotal;\n    setTotals({\n      products: productsTotal,\n      options: optionsTotal,\n      total\n    });\n  }, [orderCountes]);\n\n  // useMemo 자식 컴포넌트들의 재랜더링 최적화\n  const value = useMemo(() => {\n    function updateItemCount(itemName, newItemCount, orderType) {\n      const newOrderCounts = {\n        ...orderCounts\n      };\n      const orderCountsMap = orderCounts[orderType];\n      orderCountsMap.set(itemName, parseInt(newItemCount));\n      setOrderCounts(newOrderCounts);\n    }\n    return [{\n      ...orderCounts,\n      totals\n    }, updateItemCount];\n  }, [orderCounts, totals]);\n  return /*#__PURE__*/_jsxDEV(OrderContext.Provider, {\n    value: value,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 10\n  }, this);\n}\n_s(OrderContextProvider, \"6FDFtBXCcSf9mgrov98zIJK7k2Q=\");\n_c = OrderContextProvider;\nvar _c;\n$RefreshReg$(_c, \"OrderContextProvider\");","map":{"version":3,"names":["createContext","useState","useMemo","useEffect","OrderContext","pricePerItem","products","options","calculateSubtotal","orderType","orderCounts","optionCount","count","values","OrderContextProvider","props","setOrderCounts","Map","totals","setTotals","total","productsTotal","optionsTotal","orderCountes","value","updateItemCount","itemName","newItemCount","newOrderCounts","orderCountsMap","set","parseInt"],"sources":["/Users/jihoon/Desktop/study/tdd-jest/test-shop/frontend/src/contexts/OrderContext.js"],"sourcesContent":["import { createContext, useState, useMemo, useEffect } from \"react\"\n\nconst OrderContext = createContext();\n\nconst pricePerItem = {\n  products: 1000,\n  options: 500\n}\n\nfunction calculateSubtotal(orderType, orderCounts) {\n  let optionCount = 0;\n\n  for (const count of orderCounts[orderType].values()) {\n    optionCount += count;\n  }\n  return optionCount * pricePerItem[orderType];\n}\n\nexport function OrderContextProvider(props) {\n  const [orderCounts, setOrderCounts] = useState({\n    products: new Map(),\n    options: new Map()\n  })\n\n  const [totals, setTotals] = useState({\n    products: 0,\n    options: 0,\n    total: 0\n  })\n\n  useEffect(() => {\n    const productsTotal = calculateSubtotal('products', orderCounts);\n    const optionsTotal = calculateSubtotal('options', orderCounts);\n    const total = productsTotal + optionsTotal;\n\n    setTotals({\n      products: productsTotal,\n      options: optionsTotal,\n      total\n    })\n  }, [orderCountes])\n\n  // useMemo 자식 컴포넌트들의 재랜더링 최적화\n  const value = useMemo(() => {\n    function updateItemCount(itemName, newItemCount, orderType) {\n      const newOrderCounts = { ...orderCounts };\n\n      const orderCountsMap = orderCounts[orderType];\n      orderCountsMap.set(itemName, parseInt(newItemCount));\n\n      setOrderCounts(newOrderCounts);\n    }\n\n    return [{ ...orderCounts, totals }, updateItemCount]\n  }, [orderCounts, totals])\n\n  return <OrderContext.Provider value={value} {...props} />\n}"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,SAAS,QAAQ,OAAO;AAAA;AAEnE,MAAMC,YAAY,gBAAGJ,aAAa,EAAE;AAEpC,MAAMK,YAAY,GAAG;EACnBC,QAAQ,EAAE,IAAI;EACdC,OAAO,EAAE;AACX,CAAC;AAED,SAASC,iBAAiB,CAACC,SAAS,EAAEC,WAAW,EAAE;EACjD,IAAIC,WAAW,GAAG,CAAC;EAEnB,KAAK,MAAMC,KAAK,IAAIF,WAAW,CAACD,SAAS,CAAC,CAACI,MAAM,EAAE,EAAE;IACnDF,WAAW,IAAIC,KAAK;EACtB;EACA,OAAOD,WAAW,GAAGN,YAAY,CAACI,SAAS,CAAC;AAC9C;AAEA,OAAO,SAASK,oBAAoB,CAACC,KAAK,EAAE;EAAA;EAC1C,MAAM,CAACL,WAAW,EAAEM,cAAc,CAAC,GAAGf,QAAQ,CAAC;IAC7CK,QAAQ,EAAE,IAAIW,GAAG,EAAE;IACnBV,OAAO,EAAE,IAAIU,GAAG;EAClB,CAAC,CAAC;EAEF,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGlB,QAAQ,CAAC;IACnCK,QAAQ,EAAE,CAAC;IACXC,OAAO,EAAE,CAAC;IACVa,KAAK,EAAE;EACT,CAAC,CAAC;EAEFjB,SAAS,CAAC,MAAM;IACd,MAAMkB,aAAa,GAAGb,iBAAiB,CAAC,UAAU,EAAEE,WAAW,CAAC;IAChE,MAAMY,YAAY,GAAGd,iBAAiB,CAAC,SAAS,EAAEE,WAAW,CAAC;IAC9D,MAAMU,KAAK,GAAGC,aAAa,GAAGC,YAAY;IAE1CH,SAAS,CAAC;MACRb,QAAQ,EAAEe,aAAa;MACvBd,OAAO,EAAEe,YAAY;MACrBF;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAACG,YAAY,CAAC,CAAC;;EAElB;EACA,MAAMC,KAAK,GAAGtB,OAAO,CAAC,MAAM;IAC1B,SAASuB,eAAe,CAACC,QAAQ,EAAEC,YAAY,EAAElB,SAAS,EAAE;MAC1D,MAAMmB,cAAc,GAAG;QAAE,GAAGlB;MAAY,CAAC;MAEzC,MAAMmB,cAAc,GAAGnB,WAAW,CAACD,SAAS,CAAC;MAC7CoB,cAAc,CAACC,GAAG,CAACJ,QAAQ,EAAEK,QAAQ,CAACJ,YAAY,CAAC,CAAC;MAEpDX,cAAc,CAACY,cAAc,CAAC;IAChC;IAEA,OAAO,CAAC;MAAE,GAAGlB,WAAW;MAAEQ;IAAO,CAAC,EAAEO,eAAe,CAAC;EACtD,CAAC,EAAE,CAACf,WAAW,EAAEQ,MAAM,CAAC,CAAC;EAEzB,oBAAO,QAAC,YAAY,CAAC,QAAQ;IAAC,KAAK,EAAEM,KAAM;IAAA,GAAKT;EAAK;IAAA;IAAA;IAAA;EAAA,QAAI;AAC3D;AAAC,GAvCeD,oBAAoB;AAAA,KAApBA,oBAAoB;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}